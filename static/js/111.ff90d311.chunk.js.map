{"version":3,"file":"static/js/111.ff90d311.chunk.js","mappings":"+QAMMA,EAAS,CACbC,KAAM,CACJC,MAAO,KAETC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,aAAc,KAIZC,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,GACG,oBACPE,MAAM,uBACNC,SAAS,4BACZC,SAAUJ,EAAAA,GACA,uBACPK,IAAI,EAAG,qDACPF,SAAS,gCAGRG,EAAgB,CACpBC,KAAM,GACNL,MAAO,GACPE,SAAU,IAGCI,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,4BACE,iJACA,SAAC,KAAD,CACEJ,cAAeA,EACfK,iBAAkBZ,EAClBa,SArBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BL,GACEM,EAAAA,EAAAA,IAAM,CACJR,KAAMM,EAAON,KACbL,MAAOW,EAAOX,MACdE,SAAUS,EAAOT,YAGlBY,SACAC,MAAK,kBAAMC,IAAAA,OAAAA,QAAwB,gCAA9B,IACLC,OAAM,kBAAMD,IAAAA,OAAAA,QAAwB,4BAA9B,IACTE,QAAQC,IAAIR,GACZC,GACD,EAKG,UAKE,UAAC,KAAD,CAAMQ,MAAO9B,EAAOC,KAAM8B,aAAa,MAAvC,WACE,mBAAOD,MAAO9B,EAAOG,MAArB,4CAEE,SAAC,KAAD,CAAO6B,KAAK,QAAQjB,KAAK,WACzB,SAAC,KAAD,CAAcA,KAAK,cAGrB,mBAAOe,MAAO9B,EAAOG,MAArB,kDAEE,SAAC,KAAD,CAAO6B,KAAK,WAAWjB,KAAK,cAC5B,SAAC,KAAD,CAAcA,KAAK,iBAErB,mBAAQiB,KAAK,SAAb,iIAKT,EC1Ec,SAASC,IACtB,OACE,+BACE,SAACjB,EAAD,KAGL,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { Field, Form, Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport Notiflix from 'notiflix';\nimport { logIn } from 'redux/auth/authOperations';\n\nconst styles = {\n  form: {\n    width: 320,\n  },\n  label: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginBottom: 15,\n  },\n};\n\nconst LoginSchema = yup.object().shape({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required field.'),\n  password: yup\n    .string('Enter your password')\n    .min(5, 'Password should be of minimum 5 characters length')\n    .required('Password is required field'),\n});\n\nconst initialValues = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    dispatch(\n      logIn({\n        name: values.name,\n        email: values.email,\n        password: values.password,\n      })\n    )\n      .unwrap()\n      .then(() => Notiflix.Notify.success('Registration is successfully!'))\n      .catch(() => Notiflix.Notify.warning('Something went wrong...:('));\n    console.log(values);\n    resetForm();\n  };\n\n  return (\n    <div>\n      <h1>Страница регистрации</h1>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={LoginSchema}\n        onSubmit={handleSubmit}\n      >\n        <Form style={styles.form} autoComplete=\"off\">\n          <label style={styles.label}>\n            Почта\n            <Field type=\"email\" name=\"email\" />\n            <ErrorMessage name=\"email\" />\n          </label>\n\n          <label style={styles.label}>\n            Пароль\n            <Field type=\"password\" name=\"password\" />\n            <ErrorMessage name=\"password\" />\n          </label>\n          <button type=\"submit\">Зарегистрироваться</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nexport default function Login() {\n  return (\n    <>\n      <LoginForm />\n    </>\n  );\n}\n"],"names":["styles","form","width","label","display","flexDirection","marginBottom","LoginSchema","yup","shape","email","required","password","min","initialValues","name","LoginForm","dispatch","useDispatch","validationSchema","onSubmit","values","resetForm","logIn","unwrap","then","Notiflix","catch","console","log","style","autoComplete","type","Login"],"sourceRoot":""}